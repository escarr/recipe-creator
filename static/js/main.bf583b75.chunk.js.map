{"version":3,"sources":["history.js","ingredients-for-a-meal-1324588.jpg","italian-homemade-bread-1-1329086.jpg","recipe-1538714.jpg","generator.js","recipeDisplay.js","routes.js","App.js","reportWebVitals.js","index.js"],"names":["createBrowserHistory","ingredients","instructions","RecipeGenerator","recipe_name","useRef","ingredient","n_servings","recipe_time","amount","unit","useState","ingredientsDisplay","setIngredientsDisplay","updateIngredientsDisplay","map","i","text","onClick","idx","splice","localStorage","setItem","JSON","stringify","instructionInput","instructionsDisplay","setInstructionsDisplay","updateInstructionsDisplay","instruction","className","id","src","image1","alt","image2","image3","type","ref","accept","onChange","file","Promise","resolve","reject","reader","FileReader","onload","result","onerror","error","readAsDataURL","getBase64","target","files","then","base64","value","push","current","defaultValue","window","location","href","DisplayRecipe","getItem","recipe_image","parse","ingredientsList","split","instructionsList","all_nutrition","errors","ingredient_name","ingredient_mult","parseFloat","fetch","response","json","data","food_id","hints","food","foodId","measures","measure","label","uri","method","cache","credentials","headers","body","calories","totalNutrients","ENERC_KCAL","quantity","protein","PROCNT","fat","FAT","carbs","CHOCDF","console","log","combined_nutrition","setTimeout","length","nutrition_display","document","getElementById","innerHTML","Object","entries","key","new_item","createElement","textContent","toFixed","append","error_display","Intl","ListFormat","format","protein_cals","fat_cals","carbs_cals","radius","Math","min","svg","d3","attr","color","domain","range","data_ready","d","pie","arc","innerRadius","outerRadius","outerArc","selectAll","enter","style","posA","centroid","posB","posC","midangle","startAngle","endAngle","PI","pos","Routes","history","exact","path","component","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process"],"mappings":"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","file":"static/js/main.bf583b75.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","export default __webpack_public_path__ + \"static/media/ingredients-for-a-meal-1324588.8c722b45.jpg\";","export default __webpack_public_path__ + \"static/media/italian-homemade-bread-1-1329086.67f50187.jpg\";","export default __webpack_public_path__ + \"static/media/recipe-1538714.684634fc.jpg\";","import './App.css';\nimport image1 from './ingredients-for-a-meal-1324588.jpg'\nimport image2 from './italian-homemade-bread-1-1329086.jpg'\nimport image3 from './recipe-1538714.jpg'\nimport { useState, useRef } from 'react';\n\n// define empty lists to fill upon user action\nconst ingredients = [];\nconst instructions = [];\n\nfunction RecipeGenerator() {\n\n  const recipe_name = useRef();\n  const ingredient = useRef();\n  const n_servings = useRef();\n  const recipe_time = useRef();\n  const amount = useRef();\n  const unit = useRef();\n\n  // code to update ingredients as they are added/removed\n  const [ingredientsDisplay, setIngredientsDisplay] = useState([]); \n\n  function updateIngredientsDisplay() {\n    setIngredientsDisplay(ingredients.map((ingredient, i) => \n      <li key={i}>{ingredient.text} \n      <button onClick = {() => removeIngredient(i)}>Remove</button></li>));\n      localStorage.setItem('ingredients', JSON.stringify(ingredients));\n  }\n\n  function removeIngredient(idx) {\n    ingredients.splice(idx, 1);\n    updateIngredientsDisplay();\n  }\n\n  function addIngredient() {\n    ingredients.push({text: ingredient.current.value + ': ' + amount.current.value + ' ' + unit.current.value});\n    ingredient.current.value = \"\";\n    amount.current.value = \"\";\n    unit.current.value = \"\";\n    updateIngredientsDisplay();\n  }\n\n  // code to update instructions as they are added/removed\n  const instructionInput = useRef();\n  const [instructionsDisplay, setInstructionsDisplay] = useState([]);\n\n  function updateInstructionsDisplay() {\n    setInstructionsDisplay(instructions.map((instruction, i) => \n      <li key={i}>{instruction.text} \n      <button onClick = {() => removeInstruction(i)}>Remove</button></li>));\n      localStorage.setItem('instructions', JSON.stringify(instructions));\n  }\n\n  function removeInstruction(idx) {\n    instructions.splice(idx, 1);\n    updateInstructionsDisplay();\n  }\n\n  function addInstruction() {\n    instructions.push({text: instructionInput.current.value});\n    updateInstructionsDisplay();\n    instructionInput.current.value = \"\";\n  }\n\n  // when recipe is submitted, go to new url & save variables\n  function submitRecipe() {\n    window.location.href='/recipe';\n    localStorage.setItem('recipe_name', recipe_name.current.value);\n    localStorage.setItem('n_servings', n_servings.current.value);\n    localStorage.setItem('recipe_time', recipe_time.current.value);\n  }\n\n\n// source: https://stackoverflow.com/questions/46040973/how-to-upload-image-using-reactjs-and-save-into-local-storage\n// code for reading in & saving image\n  const getBase64 = (file) => {\n    return new Promise((resolve,reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = error => reject(error);\n      reader.readAsDataURL(file);\n    })};\n\n  function handleImageUpload (i) {\n    const file = i.target.files[0];\n    getBase64(file).then(base64 => {\n      localStorage.setItem(\"file\", base64);\n    });\n  };\n\n  return (\n\n<div className=\"App\">\n  \n    <header>\n      <h1>Create Your Own Recipe</h1>\n    </header>\n\n    <main>\n\n      <section id = \"images\">\n          <img id=\"img1\" src={image1} alt=\"ingredients on a cutting board\"/>\n          <img id=\"img2\" src={image2} alt=\"bread loaves\"/>\n          <img id=\"img3\" src={image3} alt=\"ingredients on a cutting board\"/>\n      </section>\n\n      <section id='recipe_details'>\n        <h2>Recipe Details</h2>\n        <div>\n          <label>Title:  </label>\n          <input type=\"text\" ref={recipe_name}></input>\n        </div>\n        <div>\n          <label>No. of Servings:  </label>\n          <input type=\"number\" ref={n_servings}></input>\n        </div>\n        <div>\n          <label>Estimated Time:  </label>\n          <input type=\"text\" ref={recipe_time}></input>\n        </div>\n        <div>\n          <label>Image:  </label>\n          <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload}></input>\n        </div>\n      </section>\n\n      <section>\n          <h2>Ingredients</h2>\n          <p className=\"helptext\">Enter each ingredient below. If the amount is not a whole number, please enter it as a decimal (e.g., 0.5 to represent 1/2)</p>\n          <ul id = \"ingredients_list\">{ingredientsDisplay}</ul>\n          <label>Ingredient:  </label>\n            <input type=\"text\" ref={ingredient}/>\n          <label>Amount:  </label>\n            <input type=\"text\" ref={amount}/>\n          <label>Unit:  </label>\n            <select ref={unit}>\n                <option value=\"Whole\">Whole</option>\n                <option value=\"Gram\">Gram</option>\n                <option value=\"Cup\">Cup</option>\n                <option value=\"Teaspoon\">Teaspoon</option>\n                <option value=\"Tablespoon\">Tablespoon</option>\n                <option value=\"Ounce\">Ounce</option>\n            </select>\n\n          <button id=\"addIngredient\" onClick={addIngredient}>Add</button>\n      </section>\n\n      <section>\n         <h2>Instructions</h2>\n         <p className=\"helptext\">Enter each instruction, in order, below.</p>\n         <ol id = \"instructions_list\">{instructionsDisplay}</ol>\n         <textarea id=\"instruction\" ref={instructionInput} defaultValue='Enter instruction here...'></textarea>\n         <button id=\"addInstruction\" onClick={addInstruction}>Add</button>\n      </section>\n\n      <section>\n          <input type=\"submit\" id = \"generateRecipe\" value = \"Create Recipe!\" onClick={submitRecipe}/>\n      </section>\n\n    </main>\n\n  </div>\n\n  \n  );\n}\n\nexport default RecipeGenerator;\n\n","import './App.css';\nimport * as d3 from \"d3v4\";\n\nfunction DisplayRecipe() {\n\n   // get items from local storage\n   const recipe_name = localStorage.getItem('recipe_name');\n   const recipe_image = localStorage.getItem('file');\n   const n_servings = localStorage.getItem('n_servings');\n   const recipe_time = localStorage.getItem('recipe_time');\n   const ingredients =  JSON.parse(localStorage.getItem('ingredients'));\n   const instructions =  JSON.parse(localStorage.getItem('instructions'));\n\n\n   // create lists of ingredients and instructions to display\n    const ingredientsList = ingredients.map((ingredient, i) => \n        <li key={i} className=\"ingredient\">&#9633; \n        {ingredient.text.split(\":\")[1] + \" \" + ingredient.text.split(\":\")[0]}</li>);\n\n    const instructionsList = instructions.map((instruction, i) => \n        <li key={i}>{instruction.text}</li>);\n\n    // api call for each ingredient to get nutrition info\n    const all_nutrition = [];\n    const errors = [];\n\n    for (const ingredient of ingredients) {\n\n        const ingredient_name = ingredient.text.split(\":\")[0];\n        const ingredient_mult = parseFloat(ingredient.text.split(\":\")[1].split(\" \")[1]);\n        const unit = ingredient.text.split(\":\")[1].split(\" \")[2];\n    \n        // call 1 to get the correct measure url\n        fetch(`https://api.edamam.com/api/food-database/v2/parser?&app_id=ca747d07&app_key=722fabaee32b8118f7b1cb2e32b137cf&ingr=${ingredient_name}`)\n\n        .then(response => response.json())\n        .then(data => {\n            try {\n            const food_id = data.hints[0].food.foodId; \n\n            for (const measure of data.hints[0].measures) {\n                if (unit === measure.label) {\n                    const uri =  measure.uri; \n\n                    const base_url = 'https://api.edamam.com/api/food-database/v2/nutrients?&app_id=ca747d07&app_key=722fabaee32b8118f7b1cb2e32b137cf';\n\n                    //c call 2 to get the actual nutrition info\n                    fetch(base_url, {\n                        method: 'POST',\n                        cache: 'no-cache',\n                        credentials: 'same-origin',\n\n                        headers: {\n                            'Content-Type': 'application/json'\n                         },\n                        body: JSON.stringify({\n                                \"ingredients\": [\n                                  {\n                                    \"quantity\": ingredient_mult,\n                                    \"measureURI\": uri,\n                                    \"foodId\": food_id  } ] })\n                            \n                    }).then(response => response.json()).then(data => {\n                        // add info to all_nutrition\n                        const calories = data.totalNutrients.ENERC_KCAL.quantity/n_servings;\n                        const protein = data.totalNutrients.PROCNT.quantity/n_servings;\n                        const fat = data.totalNutrients.FAT.quantity/n_servings;\n                        const carbs = data.totalNutrients.CHOCDF.quantity/n_servings;\n                        all_nutrition.push({\"ingredient\": ingredient_name, \n                                \"calories\": calories,\n                                \"protein\": protein,\n                                \"fat\": fat,\n                                \"carbs\": carbs})\n                    });\n                }\n            }\n    }\n    // in the case of an error, tell user that nutrition info couldn't be retrieved\n    catch(error) {\n        console.log(\"an error occurred\");\n        console.log(error);\n        errors.push(ingredient_name);\n    }})} ;\n\n    // aggregate nutrition info for all ingredients\n    const combined_nutrition = {\"calories\": 0, \"protein\": 0, \"fat\": 0, \"carbs\": 0};\n\n    // wait 1 second to make sure everything is populated first\n    setTimeout(\n    function calculateNutrition(){\n       for(var i = 0; i < all_nutrition.length; i++ ) {\n            combined_nutrition.calories = (combined_nutrition.calories + all_nutrition[i].calories);\n            combined_nutrition.protein = (combined_nutrition.protein + all_nutrition[i].protein);\n            combined_nutrition.fat = (combined_nutrition.fat + all_nutrition[i].fat);\n            combined_nutrition.carbs = (combined_nutrition.carbs + all_nutrition[i].carbs);\n\n       }\n\n       const nutrition_display = document.getElementById(\"nutrition_display\");\n       nutrition_display.innerHTML = \"\";\n       for (const [key, value] of Object.entries(combined_nutrition)) {\n            const new_item = document.createElement(\"li\");\n            if (key !== 'calories') {\n                new_item.textContent = key + \": \" + value.toFixed(2) + \" grams\"; \n            } else {\n                new_item.textContent = value.toFixed(0) + \" calories\"; \n            }\n            nutrition_display.append(new_item);\n                 \n       }\n\n       // output any errors\n       const error_display = document.getElementById(\"errors_list\");\n       if (errors.length === 0) {\n            error_display.innerHTML = \"\";\n       } else {\n            error_display.innerHTML = \"Note: Unable to retrieve nutritional information for \" + new Intl.ListFormat('en').format(errors); \n        }\n \n\n       // convert grams to calories\n       const protein_cals = combined_nutrition.protein*4;\n       const fat_cals = combined_nutrition.fat*9;\n       const carbs_cals = combined_nutrition.carbs*4;\n\n        // pie chart\n        // set the dimensions and margins of the graph\n        var width = 500\n        var height = 500\n        var margin = 120\n        \n        // source: https://www.d3-graph-gallery.com/graph/donut_basic.html\n        // source: https://www.d3-graph-gallery.com/graph/donut_label.html\n        \n        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.\n        var radius = Math.min(width, height) / 2 - margin\n           \n        document.getElementById(\"my_dataviz\").innerHTML = \"\";\n        // append the svg object to the div called 'my_dataviz'\n        var svg = d3.select(\"#my_dataviz\")\n                .append(\"svg\")\n                .attr(\"width\", width)\n                .attr(\"height\", height)\n                .append(\"g\")\n                .attr(\"transform\", \"translate(\" + width / 2 + \",\" + height / 2 + \")\");\n           \n       // replaced with my data\n        var data = {protein: protein_cals, fat: fat_cals, carbs:carbs_cals};\n           \n        // set the color scale\n        var color = d3.scaleOrdinal()\n            .domain(data)\n                .range([\"#EC6B56\", \"##FFC154\", \"#47B39C\"])\n           \n        // Compute the position of each group on the pie:\n        var pie = d3.pie()\n            .value(function(d) {return d.value; })\n             var data_ready = pie(d3.entries(data))\n                // The arc generator\n        var arc = d3.arc()\n        .innerRadius(radius * 0.4)         // This is the size of the donut hole\n        .outerRadius(radius * 0.8)\n\n        // Another arc that won't be drawn. Just for labels positioning\n        var outerArc = d3.arc()\n        .innerRadius(radius * 0.9)\n        .outerRadius(radius * 0.9)\n\n        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.\n        svg\n        .selectAll('allSlices')\n        .data(data_ready)\n        .enter()\n        .append('path')\n        .attr('d', arc)\n        .attr('fill', function(d){ return(color(d.data.key)) })\n        .attr(\"stroke\", \"white\")\n        .style(\"stroke-width\", \"2px\")\n        .style(\"opacity\", 0.7)\n\n        // Add the polylines between chart and labels:\n        svg\n        .selectAll('allPolylines')\n        .data(data_ready)\n        .enter()\n        .append('polyline')\n        .attr(\"stroke\", \"black\")\n        .style(\"fill\", \"none\")\n        .attr(\"stroke-width\", 1)\n        .attr('points', function(d) {\n            var posA = arc.centroid(d) // line insertion in the slice\n            var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that\n            var posC = outerArc.centroid(d); // Label position = almost the same as posB\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left\n            posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left\n            return [posA, posB, posC]\n        })\n\n        // Add the polylines between chart and labels:\n        svg\n        .selectAll('allLabels')\n        .data(data_ready)\n        .enter()\n        .append('text')\n        .text( function(d) { return d.data.key + ' (' + d.data.value.toFixed(0) + ' cals)' } )\n        .attr('transform', function(d) {\n            var pos = outerArc.centroid(d);\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n            pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);\n            return 'translate(' + pos + ')';\n        })\n        .style('text-anchor', function(d) {\n            var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2\n            return (midangle < Math.PI ? 'start' : 'end')\n        })\n      }, 1000);\n          \n    return(\n\n    <div className=\"App\">\n\n    <header>\n      <h1>{recipe_name}</h1>\n    </header>\n\n        <main>\n            <section id = \"recipeInfo\">\n            <section>\n                <p><strong>Estimated Recipe Time:</strong> {recipe_time} </p>\n                <p><strong>Number of servings:</strong> {n_servings} </p>\n                <img src={recipe_image} alt=\"uploaded recipe\"></img>\n            </section>\n\n            <section  id=\"recipeDetails\">\n                <h2>Ingredients</h2>\n                <ul>{ingredientsList}</ul>\n                <h2>Instructions</h2>\n                <ol>{instructionsList}</ol>\n            </section>\n\n            </section>\n\n            <h2 id=\"nutrition_header\">Nutritional Information (per serving)</h2>\n            <p id=\"errors_list\"></p>\n            <section id=\"nutritionInfo\">\n                <ul id=\"nutrition_display\"></ul>\n                <div id=\"my_dataviz\"></div>\n            </section>\n\n        </main>\n    </div>\n )};\n\n\nexport default DisplayRecipe;","import React, { Component } from \"react\";\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport history from \"./history.js\";\nimport RecipeGenerator from \"./generator.js\";\nimport DisplayRecipe from \"./recipeDisplay.js\"\n\n\nexport default class Routes extends Component {\n    render() {\n        return (\n            <Router history={history}>\n                <Switch>\n                    <Route exact path=\"/\" component={RecipeGenerator} />\n                    <Route exact path=\"/recipe\" component={DisplayRecipe} />\n\n                </Switch>\n            </Router>\n        )\n    }\n}","import './App.css';\nimport Routes from './routes.js'\n\n\nfunction App() {\n    return (\n      <div className=\"App\">\n        <Routes />\n      </div>\n    );\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport BrowserRouter from 'react-router-dom/BrowserRouter'\n\nReactDOM.render(\n  <React.StrictMode>\n       <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App />\n      </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}